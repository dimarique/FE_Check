[
  {
    "id": 1,
    "question": "Was gibt der Code aus: console.log('First'); setTimeout(() => console.log('Second'), 100); console.log('Third');",
    "answer": "Zuerst wird 'First' ausgegeben, dann 'Third' und danach 'Second'.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 2,
    "question": "Was ist setTimeout in JavaScript?",
    "answer": "Eine Funktion, die die Ausführung des übergebenen Callbacks für eine bestimmte Zeit verzögert.",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 3,
    "question": "Was macht die Funktion fetch?",
    "answer": "Sie führt eine HTTP-Anfrage aus und gibt ein Promise mit einem Response-Objekt zurück.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 4,
    "question": "Welche Methoden hat das Objekt Response?",
    "answer": ".text(), .json(), .blob(), .arrayBuffer(), .formData()",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 5,
    "question": "Was sind die HTTP-Methoden GET und POST?",
    "answer": "GET – Daten abrufen, POST – Daten senden.",
    "category": "HTTP",
    "difficulty": "easy"
  },
  {
    "id": 6,
    "question": "Was bedeuten die Codes 200, 404, 500?",
    "answer": "200 – Erfolg, 404 – nicht gefunden, 500 – Serverfehler.",
    "category": "HTTP",
    "difficulty": "easy"
  },
  {
    "id": 7,
    "question": "Wie übergibt man Parameter an fetch bei einem POST-Request?",
    "answer": "Über das options-Objekt: { method: 'POST', body: JSON.stringify(data), headers: {...} }.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 8,
    "question": "Warum ist JavaScript ein Single-Threaded-Language?",
    "answer": "Weil es nur einen Call Stack hat und immer nur eine Aufgabe gleichzeitig ausgeführt wird.",
    "category": "Event Loop",
    "difficulty": "medium"
  },
  {
    "id": 9,
    "question": "Was ist der Event Loop?",
    "answer": "Ein Mechanismus, der die Ausführung von Code, Callbacks und Promises steuert.",
    "category": "Event Loop",
    "difficulty": "medium"
  },
  {
    "id": 10,
    "question": "Was ist der Call Stack?",
    "answer": "Der Stapel, in dem synchroner Code ausgeführt wird.",
    "category": "Event Loop",
    "difficulty": "easy"
  },
  {
    "id": 11,
    "question": "Was ist die Callback Queue?",
    "answer": "Eine Warteschlange, in die Callbacks wie von setTimeout gelangen.",
    "category": "Event Loop",
    "difficulty": "medium"
  },
  {
    "id": 12,
    "question": "Was ist die Microtask Queue?",
    "answer": "Die Warteschlange für Mikrotasks: then(), catch(), finally.",
    "category": "Event Loop",
    "difficulty": "medium"
  },
  {
    "id": 13,
    "question": "Was wird zuerst ausgeführt – Promises oder setTimeout?",
    "answer": "Zuerst Promises (Microtasks), dann setTimeout (Macrotasks).",
    "category": "Event Loop",
    "difficulty": "medium"
  },
  {
    "id": 14,
    "question": "Was macht das Schlüsselwort async?",
    "answer": "Eine Funktion gibt immer ein Promise zurück.",
    "category": "Async/Await",
    "difficulty": "easy"
  },
  {
    "id": 15,
    "question": "Was macht await?",
    "answer": "Es pausiert die Ausführung der Funktion, bis das Promise erfüllt ist.",
    "category": "Async/Await",
    "difficulty": "easy"
  },
  {
    "id": 16,
    "question": "Kann man await außerhalb einer async-Funktion verwenden?",
    "answer": "Nein.",
    "category": "Async/Await",
    "difficulty": "medium"
  },
  {
    "id": 17,
    "question": "Was passiert, wenn in einer async-Funktion ein Fehler ausgelöst wird?",
    "answer": "Die Funktion gibt ein abgelehntes Promise zurück.",
    "category": "Async/Await",
    "difficulty": "medium"
  },
  {
    "id": 18,
    "question": "Wie behandelt man Fehler in async/await?",
    "answer": "Mit try/catch.",
    "category": "Async/Await",
    "difficulty": "medium"
  },
  {
    "id": 19,
    "question": "Warum ist async/await bequemer als then?",
    "answer": "Der Code liest sich wie synchroner Code.",
    "category": "Async/Await",
    "difficulty": "medium"
  },
  {
    "id": 20,
    "question": "Wozu dient Promise.all?",
    "answer": "Zum parallelen Ausführen mehrerer Promises.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 21,
    "question": "Wie funktioniert Promise.all?",
    "answer": "Es wartet, bis alle Promises erfüllt sind, oder lehnt ab, wenn eines fehlschlägt.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 22,
    "question": "Was gibt Promise.all zurück?",
    "answer": "Ein Promise mit einem Array der Ergebnisse.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 23,
    "question": "Wenn p1 nach 1 Sekunde und p2 nach 2 Sekunden erfüllt wird – wie lange wartet Promise.all([p1, p2])?",
    "answer": "2 Sekunden.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 24,
    "question": "Was passiert, wenn eines der Promises in Promise.all fehlschlägt?",
    "answer": "Das gesamte Promise.all wird abgelehnt.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 25,
    "question": "Was macht Promise.race?",
    "answer": "Es gibt das Ergebnis des zuerst abgeschlossenen Promises zurück.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 26,
    "question": "Worin besteht der Unterschied zwischen Promise.all und Promise.race?",
    "answer": "all wartet auf alle Promises, race nur auf das erste.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 27,
    "question": "Was passiert, wenn das erste Promise in race fehlschlägt?",
    "answer": "race wird mit einem Fehler abgelehnt.",
    "category": "Promises",
    "difficulty": "medium"
  },
  {
    "id": 28,
    "question": "Was ist this in JavaScript?",
    "answer": "Der Kontext, in dem eine Funktion ausgeführt wird.",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 29,
    "question": "Was gibt this im globalen Bereich des Browsers zurück?",
    "answer": "window.",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 30,
    "question": "Was sind call, apply und bind?",
    "answer": "Methoden, um den Wert von this explizit festzulegen.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 31,
    "question": "Worin besteht der Unterschied zwischen call und apply?",
    "answer": "call nimmt Argumente durch Komma getrennt, apply als Array.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 32,
    "question": "Was macht bind?",
    "answer": "Es gibt eine neue Funktion mit gebundenem this zurück.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 33,
    "question": "Wie funktioniert this in Pfeilfunktionen?",
    "answer": "Es übernimmt den Kontext aus dem umgebenden Geltungsbereich.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 34,
    "question": "Was ist Kapselung (Encapsulation)?",
    "answer": "Das Verbergen der Implementierungsdetails eines Objekts.",
    "category": "OOP",
    "difficulty": "medium"
  },
  {
    "id": 35,
    "question": "Was ist Vererbung (Inheritance)?",
    "answer": "Ein Mechanismus, der es einer Klasse erlaubt, Eigenschaften und Methoden einer anderen Klasse zu übernehmen.",
    "category": "OOP",
    "difficulty": "medium"
  },
  {
    "id": 36,
    "question": "Was ist Polymorphismus?",
    "answer": "Die Fähigkeit von Methoden, sich je nach Kontext unterschiedlich zu verhalten.",
    "category": "OOP",
    "difficulty": "hard"
  },
  {
    "id": 37,
    "question": "Was ist eine Klasse in JavaScript?",
    "answer": "Syntaktischer Zucker über Prototypen.",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 38,
    "question": "Was macht das Schlüsselwort constructor?",
    "answer": "Es definiert eine Funktion, die beim Erstellen einer Instanz aufgerufen wird.",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 39,
    "question": "Wie funktioniert extends?",
    "answer": "Es ermöglicht einer Klasse, von einer anderen zu erben.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 40,
    "question": "Was ist React?",
    "answer": "Eine Bibliothek zum Erstellen von Benutzeroberflächen.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 41,
    "question": "Was ist eine Komponente in React?",
    "answer": "Eine Funktion oder Klasse, die JSX zurückgibt.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 42,
    "question": "Was ist JSX?",
    "answer": "Eine Syntaxerweiterung für JavaScript, um Benutzeroberflächen zu beschreiben.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 43,
    "question": "Kann man React ohne JSX verwenden?",
    "answer": "Ja, aber JSX ist bequemer.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 44,
    "question": "Was sind Props?",
    "answer": "Daten, die an eine Komponente übergeben werden.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 45,
    "question": "Kann man Props innerhalb einer Komponente ändern?",
    "answer": "Nein.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 46,
    "question": "Wie übergibt man Werte an Props?",
    "answer": "Über Attribute: <Comp name=\"A\"/>.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 47,
    "question": "Was ist children in React?",
    "answer": "Der Inhalt zwischen den öffnenden und schließenden Tags einer Komponente.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 48,
    "question": "Was ist State?",
    "answer": "Der interne Zustand einer Komponente.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 49,
    "question": "Wie aktualisiert man den State in einer Funktionskomponente?",
    "answer": "Mit useState.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 50,
    "question": "Was passiert, wenn man den State direkt ändert?",
    "answer": "Die Benutzeroberfläche wird nicht aktualisiert.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 51,
    "question": "Was ist ein Hook?",
    "answer": "Eine Funktion, um mit Zustand und Lebenszyklus in Funktionskomponenten zu arbeiten.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 52,
    "question": "Wofür wird useEffect verwendet?",
    "answer": "Für Nebenwirkungen (Side Effects).",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 53,
    "question": "Wann wird useEffect ohne Abhängigkeiten aufgerufen?",
    "answer": "Einmal nach dem Mounten.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 54,
    "question": "Wann wird useEffect mit einem leeren Abhängigkeitsarray aufgerufen?",
    "answer": "Ebenfalls einmal nach dem Mounten.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 55,
    "question": "Wann wird useEffect mit Abhängigkeiten aufgerufen?",
    "answer": "Wenn sich eine der Abhängigkeiten ändert.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 56,
    "question": "Was gibt useState zurück?",
    "answer": "Ein Array mit dem aktuellen Wert und einer Funktion zum Aktualisieren.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 57,
    "question": "Was ist bedingtes Rendern (Conditional Rendering)?",
    "answer": "Das Anzeigen von Elementen abhängig von einer Bedingung.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 58,
    "question": "Welche Möglichkeiten gibt es, Komponenten zu stylen?",
    "answer": "CSS, CSS-Module, Inline-Stile, styled-components.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 59,
    "question": "Wie übergibt man Stile über Props?",
    "answer": "Durch das style-Attribut: <Comp style={{color:'red'}}/>.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 60,
    "question": "Was macht die Methode Object.assign?",
    "answer": "Object.assign() kopiert alle aufzählbaren eigenen Eigenschaften eines oder mehrerer Quellobjekte in ein Zielobjekt und gibt dieses zurück.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 61,
    "question": "Wie lautet die Syntax von Object.assign?",
    "answer": "Object.assign(target, ...sources) – wobei target das Zielobjekt ist und sources ein oder mehrere Quellobjekte sind.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 62,
    "question": "Was ist der Unterschied zwischen Object.assign(target, source) und Object.assign({}, target, source)?",
    "answer": "Die erste Variante ändert das ursprüngliche Objekt target, die zweite erstellt ein neues Objekt, ohne target zu verändern.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 63,
    "question": "Wofür werden Object.keys, Object.values und Object.entries verwendet?",
    "answer": "Object.keys(obj) gibt ein Array der Schlüssel zurück, Object.values(obj) – ein Array der Werte, Object.entries(obj) – ein Array von [Schlüssel, Wert]-Paaren.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 64,
    "question": "Was gibt Object.keys({ a: 1, b: 2 }) zurück?",
    "answer": "['a', 'b']",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 65,
    "question": "Was gibt Object.values({ a: 1, b: 2 }) zurück?",
    "answer": "[1, 2]",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 66,
    "question": "Was gibt Object.entries({ a: 1, b: 2 }) zurück?",
    "answer": "[['a', 1], ['b', 2]]",
    "category": "JavaScript",
    "difficulty": "easy"
  },
  {
    "id": 67,
    "question": "Wie kann man alle Eigenschaften eines Objekts mit Object.entries durchlaufen?",
    "answer": "Mit einer for...of-Schleife, z. B.: for (let [key, value] of Object.entries(obj)) { console.log(key, value); }",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 68,
    "question": "Wann ist es sinnvoll, Object.entries anstelle von Object.keys oder Object.values zu verwenden?",
    "answer": "Wenn man gleichzeitig Zugriff auf den Schlüssel und den Wert jeder Eigenschaft benötigt.",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 69,
    "question": "Was ist bedingtes Rendern in React?",
    "answer": "Eine Methode in React, um verschiedene Elemente oder Komponenten abhängig von einer Bedingung anzuzeigen.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 70,
    "question": "Warum kann man in JSX kein if-else direkt verwenden?",
    "answer": "In JSX kann man nur Ausdrücke verwenden, und if-else ist eine Steuerstruktur.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 71,
    "question": "Wie funktioniert bedingtes Rendern mit &&?",
    "answer": "Wenn der linke Ausdruck wahr ist, wird der rechte gerendert. Wenn er falsch ist, wird er ignoriert.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 72,
    "question": "Was ist der Unterschied zwischen bedingtem Rendern mit && und dem ternären Operator?",
    "answer": "&& wird verwendet, wenn man nur bei einer Bedingung rendern will. Der ternäre Operator erlaubt die Auswahl zwischen zwei Renderoptionen.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 73,
    "question": "Warum sollte man Komponenten und Logik auf verschiedene Dateien aufteilen?",
    "answer": "Das verbessert die Projektstruktur und macht den Code wiederverwendbarer und lesbarer.",
    "category": "JavaScript/React",
    "difficulty": "easy"
  },
  {
    "id": 74,
    "question": "Welche Exportarten gibt es in JavaScript?",
    "answer": "Standardexport (export default) und benannten Export (export { ... }).",
    "category": "JavaScript",
    "difficulty": "medium"
  },
  {
    "id": 75,
    "question": "Wie lautet die Syntax für den Standardimport?",
    "answer": "import MyComponent from './MyComponent.jsx';",
    "category": "JavaScript/React",
    "difficulty": "easy"
  },
  {
    "id": 76,
    "question": "Wie lautet die Syntax für den benannten Import?",
    "answer": "import { MyComponent } from './MyComponent.jsx';",
    "category": "JavaScript/React",
    "difficulty": "easy"
  },
  {
    "id": 77,
    "question": "Was ist der Unterschied zwischen Standardimport und benanntem Import?",
    "answer": "Beim Standardimport kann man beliebige Namen vergeben, beim benannten muss man den ursprünglichen Namen (oder einen Alias) verwenden.",
    "category": "JavaScript/React",
    "difficulty": "medium"
  },
  {
    "id": 78,
    "question": "Wie erstellt man einen Alias bei einem benannten Import?",
    "answer": "import { MyComponent as Alias } from './MyComponent.jsx';",
    "category": "JavaScript/React",
    "difficulty": "easy"
  },
  {
    "id": 79,
    "question": "Welche Möglichkeiten gibt es, Komponenten in React zu stylen?",
    "answer": "1. Normale CSS-Dateien. 2. CSS-Module. 3. Inline-Stile.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 80,
    "question": "Was ist das Besondere an CSS-Modulen?",
    "answer": "Sie verhindern Namenskonflikte von CSS-Klassen, indem sie automatisch eindeutige Klassennamen erzeugen.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 81,
    "question": "Wie bindet man CSS-Module in React ein?",
    "answer": "import styles from './Component.module.css';",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 82,
    "question": "Wie verwendet man eine Klasse aus einem CSS-Modul in JSX?",
    "answer": "<div className={styles.className}></div>",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 83,
    "question": "Welche Besonderheiten haben Inline-Stile in JSX?",
    "answer": "Sie werden als Objekt im style-Attribut übergeben, und CSS-Eigenschaften werden im camelCase geschrieben.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 84,
    "question": "Wann verwendet man Inline-Stile?",
    "answer": "Für dynamische Stile oder schnelles Prototyping.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 85,
    "question": "Was sind Props in React?",
    "answer": "Props sind der Hauptmechanismus, um Daten von der Eltern- zur Kindkomponente zu übergeben.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 86,
    "question": "Wozu dienen Props?",
    "answer": "Um Komponenten wiederverwendbar und dynamisch zu machen.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 87,
    "question": "Aus welchen zwei Schritten besteht die Verwendung von Props?",
    "answer": "1. Definition der Props in der Komponente. 2. Übergabe der Props beim Aufruf in JSX.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 88,
    "question": "Was passiert, wenn man einer Komponente ein Prop übergibt, das sie nicht verwendet?",
    "answer": "Die Komponente ignoriert es.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 89,
    "question": "Wie sammelt React die übergebenen Props innerhalb einer Komponente?",
    "answer": "Alle Props werden zu einem Objekt zusammengefasst, das als erstes Argument an die Funktionskomponente übergeben wird.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 90,
    "question": "Was ist Destrukturierung von Props?",
    "answer": "Eine bequeme Methode, um einzelne Eigenschaften aus dem Props-Objekt zu extrahieren: function Component({ prop1, prop2 }) { ... }.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 91,
    "question": "Wie legt man Standardwerte für Props fest?",
    "answer": "Durch Destrukturierung: function Comp({ text = 'Default' }) { ... }.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 92,
    "question": "Was passiert, wenn man ein Prop mit einem Standardwert übergibt?",
    "answer": "Der übergebene Wert wird verwendet, andernfalls der Standardwert.",
    "category": "React",
    "difficulty": "easy"
  },
  {
    "id": 93,
    "question": "Wie rendert man Listen in React?",
    "answer": "Mit der Array-Methode .map(), um Elemente in JSX umzuwandeln.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 94,
    "question": "Warum kann man beim Rendern von Listen keine Standard-Schleifen verwenden?",
    "answer": "In JSX kann man nur Ausdrücke verwenden, während for und while Steuerstrukturen sind.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 95,
    "question": "Wozu dient das Attribut key beim Rendern von Listen?",
    "answer": "Es hilft React, Elemente zu verfolgen und Updates zu optimieren.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 96,
    "question": "Wie übergibt man nicht-primitive Daten als Props?",
    "answer": "Indem man sie in geschweifte Klammern setzt: <Comp data={myArray} />.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 97,
    "question": "Wie funktioniert die Ereignisbehandlung in React?",
    "answer": "Event-Handler werden als camelCase-Attribute hinzugefügt (z. B. onClick) und erhalten ein SyntheticEvent.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 98,
    "question": "Warum übergibt man Funktionen als Props?",
    "answer": "Damit Kindkomponenten Funktionen der Eltern aufrufen und ihnen Ereignisse mitteilen können.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 99,
    "question": "Was ist props.children?",
    "answer": "Ein spezielles Prop, das alles enthält, was zwischen den öffnenden und schließenden Tags der Komponente steht.",
    "category": "React",
    "difficulty": "medium"
  },
  {
    "id": 100,
    "question": "Wofür wird props.children verwendet?",
    "answer": "Zum Erstellen von Wrapper-Komponenten, die Struktur oder Stil für eingebettete Inhalte hinzufügen.",
    "category": "React",
    "difficulty": "medium"
  }
]
